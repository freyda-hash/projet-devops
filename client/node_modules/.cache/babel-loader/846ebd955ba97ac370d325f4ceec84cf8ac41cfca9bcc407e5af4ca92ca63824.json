{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AuthenticationService from \"@/services/AuthenticationService.js\";\nimport UserService from \"@/services/UserService.js\";\nimport ReviewService from \"@/services/ReviewService.js\";\nexport default {\n  name: \"UAccount\",\n  components: {},\n  data() {\n    return {\n      userId: 0,\n      user: {},\n      admin: false,\n      modalAlert: null,\n      deleteAccountError: \"\",\n      currentPassword: null\n    };\n  },\n  mounted() {\n    this.userId = this.$store.state.CurrentUser.userId;\n    this.user = this.$store.state.CurrentUser.user;\n    this.admin = this.$store.state.CurrentUser.admin;\n  },\n  methods: {\n    focusPasswordField() {\n      this.$refs.passwordField.focus();\n    },\n    async deleteAccount() {\n      var correctPassword = false;\n      try {\n        correctPassword = (await AuthenticationService.verifyPassword(this.currentPassword)).data.correctPassword;\n      } catch (error) {\n        this.modalAlert = true;\n        this.deleteAccountError = error.response.data.error;\n        console.log(error.response.data.error);\n      }\n      if (correctPassword) {\n        var reviewList = [];\n        try {\n          reviewList = (await ReviewService.getUsersReviewList(this.userId)).data;\n        } catch (error) {\n          console.log(error.response.data.error);\n        }\n        var i;\n        for (i in reviewList) {\n          await this.$store.dispatch(\"Review/deleteReview\", reviewList[i]);\n        }\n        try {\n          await UserService.deleteAccount(this.userId);\n        } catch (error) {\n          this.modalAlert = true;\n          this.deleteAccountError = error.response.data.error;\n        }\n        this.$store.dispatch(\"CurrentUser/setToken\", \"\");\n        this.$store.dispatch(\"CurrentUser/setUser\", {});\n        this.$router.push({\n          path: \"/\"\n        });\n      }\n    }\n  },\n  computed: {}\n};","map":{"version":3,"names":["AuthenticationService","UserService","ReviewService","name","components","data","userId","user","admin","modalAlert","deleteAccountError","currentPassword","mounted","$store","state","CurrentUser","methods","focusPasswordField","$refs","passwordField","focus","deleteAccount","correctPassword","verifyPassword","error","response","console","log","reviewList","getUsersReviewList","i","dispatch","$router","push","path","computed"],"sources":["src/components/User/Profile/UAccount.vue"],"sourcesContent":["<template>\n  <div>\n    <b-row>\n      <b-col>\n        <h5>Account</h5>\n        <hr />\n      </b-col>\n    </b-row>\n    <div>\n      <div v-if=\"admin\">\n        Role\n        <br />\n        <b-button class=\"mt-2\">\n          {{ user.userType }}\n        </b-button>\n        <hr />\n      </div>\n      <div>\n        <b-button\n          v-b-modal.delete-account-confirmation\n          variant=\"outline-danger\"\n        >\n          Close my account\n        </b-button>\n        <br />\n        <p class=\"mt-2\">\n          Once you delete your account, you'll not be able to revert it.\n        </p>\n      </div>\n    </div>\n    <b-modal\n      @shown=\"focusPasswordField\"\n      hide-footer\n      id=\"delete-account-confirmation\"\n    >\n      <template #modal-title> Are you sure you want to do this? </template>\n      <p>We'll also delete all of your activity from our server.</p>\n\n      <label for=\"input-password\">\n        To be sure please enter your\n        <strong>current password</strong>\n      </label>\n      <b-form-input\n        type=\"password\"\n        @keyup=\"modalAlert = false\"\n        ref=\"passwordField\"\n        v-model=\"currentPassword\"\n        id=\"input-password\"\n      />\n      <b-alert :show=\"modalAlert\" variant=\"primary\" class=\"my-2 p-1 pl-2\">\n        {{ deleteAccountError }}\n      </b-alert>\n      <b-row class=\"mt-3\">\n        <b-col cols=\"4\" />\n        <b-col cols=\"4\">\n          <b-button\n            @click=\"$bvModal.hide('delete-account-confirmation')\"\n            block\n            variant=\"warning\"\n          >\n            Cancel\n          </b-button>\n        </b-col>\n        <b-col cols=\"4\">\n          <b-button block @click=\"deleteAccount\" variant=\"danger\">\n            Delete Account\n          </b-button>\n        </b-col>\n      </b-row>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport AuthenticationService from \"@/services/AuthenticationService.js\";\nimport UserService from \"@/services/UserService.js\";\nimport ReviewService from \"@/services/ReviewService.js\";\nexport default {\n  name: \"UAccount\",\n  components: {},\n  data() {\n    return {\n      userId: 0,\n      user: {},\n      admin: false,\n      modalAlert: null,\n      deleteAccountError: \"\",\n      currentPassword: null,\n    };\n  },\n  mounted() {\n    this.userId = this.$store.state.CurrentUser.userId;\n    this.user = this.$store.state.CurrentUser.user;\n    this.admin = this.$store.state.CurrentUser.admin;\n  },\n  methods: {\n    focusPasswordField() {\n      this.$refs.passwordField.focus();\n    },\n    async deleteAccount() {\n      var correctPassword = false;\n      try {\n        correctPassword = (\n          await AuthenticationService.verifyPassword(this.currentPassword)\n        ).data.correctPassword;\n      } catch (error) {\n        this.modalAlert = true;\n        this.deleteAccountError = error.response.data.error;\n        console.log(error.response.data.error);\n      }\n      if (correctPassword) {\n        var reviewList = [];\n        try {\n          reviewList = (await ReviewService.getUsersReviewList(this.userId))\n            .data;\n        } catch (error) {\n          console.log(error.response.data.error);\n        }\n        var i;\n        for (i in reviewList) {\n          await this.$store.dispatch(\"Review/deleteReview\", reviewList[i]);\n        }\n        try {\n          await UserService.deleteAccount(this.userId);\n        } catch (error) {\n          this.modalAlert = true;\n          this.deleteAccountError = error.response.data.error;\n        }\n        this.$store.dispatch(\"CurrentUser/setToken\", \"\");\n        this.$store.dispatch(\"CurrentUser/setUser\", {});\n        this.$router.push({ path: \"/\" });\n      }\n    },\n  },\n  computed: {},\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n"],"mappings":";AA0EA,OAAAA,qBAAA;AACA,OAAAC,WAAA;AACA,OAAAC,aAAA;AACA;EACAC,IAAA;EACAC,UAAA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,IAAA;MACAC,KAAA;MACAC,UAAA;MACAC,kBAAA;MACAC,eAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAN,MAAA,QAAAO,MAAA,CAAAC,KAAA,CAAAC,WAAA,CAAAT,MAAA;IACA,KAAAC,IAAA,QAAAM,MAAA,CAAAC,KAAA,CAAAC,WAAA,CAAAR,IAAA;IACA,KAAAC,KAAA,QAAAK,MAAA,CAAAC,KAAA,CAAAC,WAAA,CAAAP,KAAA;EACA;EACAQ,OAAA;IACAC,mBAAA;MACA,KAAAC,KAAA,CAAAC,aAAA,CAAAC,KAAA;IACA;IACA,MAAAC,cAAA;MACA,IAAAC,eAAA;MACA;QACAA,eAAA,IACA,MAAAtB,qBAAA,CAAAuB,cAAA,MAAAZ,eAAA,GACAN,IAAA,CAAAiB,eAAA;MACA,SAAAE,KAAA;QACA,KAAAf,UAAA;QACA,KAAAC,kBAAA,GAAAc,KAAA,CAAAC,QAAA,CAAApB,IAAA,CAAAmB,KAAA;QACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA,CAAAC,QAAA,CAAApB,IAAA,CAAAmB,KAAA;MACA;MACA,IAAAF,eAAA;QACA,IAAAM,UAAA;QACA;UACAA,UAAA,UAAA1B,aAAA,CAAA2B,kBAAA,MAAAvB,MAAA,GACAD,IAAA;QACA,SAAAmB,KAAA;UACAE,OAAA,CAAAC,GAAA,CAAAH,KAAA,CAAAC,QAAA,CAAApB,IAAA,CAAAmB,KAAA;QACA;QACA,IAAAM,CAAA;QACA,KAAAA,CAAA,IAAAF,UAAA;UACA,WAAAf,MAAA,CAAAkB,QAAA,wBAAAH,UAAA,CAAAE,CAAA;QACA;QACA;UACA,MAAA7B,WAAA,CAAAoB,aAAA,MAAAf,MAAA;QACA,SAAAkB,KAAA;UACA,KAAAf,UAAA;UACA,KAAAC,kBAAA,GAAAc,KAAA,CAAAC,QAAA,CAAApB,IAAA,CAAAmB,KAAA;QACA;QACA,KAAAX,MAAA,CAAAkB,QAAA;QACA,KAAAlB,MAAA,CAAAkB,QAAA;QACA,KAAAC,OAAA,CAAAC,IAAA;UAAAC,IAAA;QAAA;MACA;IACA;EACA;EACAC,QAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
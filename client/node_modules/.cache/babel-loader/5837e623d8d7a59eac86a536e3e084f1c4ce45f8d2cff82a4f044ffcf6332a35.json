{"ast":null,"code":"import AuthenticationService from \"@/services/AuthenticationService.js\";\nimport UserService from \"@/services/UserService.js\";\nexport default {\n  name: \"UPublicProfile\",\n  components: {},\n  data() {\n    return {\n      user: {},\n      userId: 0,\n      editName: 0,\n      lastName: \"\",\n      userName: \"\",\n      firstName: \"\",\n      editUserName: 0,\n      formatUserName: /^[a-zA-Z0-9]{6,20}$/,\n      formatPassword: /^[a-zA-z0-9]{8,32}$/,\n      userNameMessage: \"\",\n      userNameValidation: null,\n      validCurrentPassword: true,\n      currentPasswordMessage: \"\",\n      newPasswordMessage: \"\",\n      confirmPasswordMessage: \"\",\n      currentPassword: null,\n      newPassword: null,\n      confirmPassword: null\n    };\n  },\n  computed: {\n    currentPasswordValidation() {\n      if (this.currentPassword == \"\") return false;else return null;\n    },\n    newPasswordValidation() {\n      if (this.newPassword == null) return null;else if (!this.formatPassword.test(this.newPassword)) {\n        return false;\n      } else return true;\n    },\n    confirmPasswordValidation() {\n      if (this.confirmPassword == null) return null;else if (this.newPassword != this.confirmPassword || !this.formatPassword.test(this.confirmPassword)) {\n        return false;\n      } else return true;\n    }\n  },\n  async mounted() {\n    this.userId = this.$store.state.CurrentUser.userId;\n    try {\n      this.user = (await UserService.getUserById(this.userId)).data;\n    } catch (error) {\n      console.log(error.response.data.error);\n    }\n  },\n  methods: {\n    changeName() {\n      this.firstName = this.user.firstName;\n      this.lastName = this.user.lastName;\n      this.editName ^= 1;\n    },\n    async updateName() {\n      try {\n        await UserService.updateUser({\n          id: this.user.id,\n          firstName: this.firstName,\n          lastName: this.lastName\n        });\n        this.$store.dispatch(\"CurrentUser/setName\", {\n          firstName: this.firstName,\n          lastName: this.lastName\n        });\n        this.editName ^= 1;\n        window.location.reload();\n      } catch (error) {\n        console.log(error.response.data.error);\n      }\n    },\n    changeUserName() {\n      this.userName = this.user.username;\n      this.editUserName ^= 1;\n    },\n    async checkUserName() {\n      if (this.userName == this.user.username) {\n        return true;\n      } else if (!this.formatUserName.test(this.userName)) {\n        this.userNameValidation = false;\n        this.userNameMessage = \"Your username must be 6-20 characters using alphabets and numbers\";\n        return false;\n      }\n      try {\n        const response = (await UserService.checkUserName(this.userName)).data;\n        this.userNameValidation = response.userNameAvailable;\n        if (response.userNameAvailable == true) {\n          this.userNameMessage = \"\";\n          return true;\n        } else {\n          this.userNameMessage = \"This username is not available\";\n          return false;\n        }\n      } catch (error) {\n        this.userNameValidation = false;\n        this.userNameMessage = error.response.data.error;\n        console.log(error.response.data.error);\n      }\n    },\n    async updateUserName() {\n      if (!(await this.checkUserName()) || this.userName == this.user.username) {\n        return;\n      }\n      try {\n        await UserService.updateUser({\n          id: this.user.id,\n          username: this.userName\n        });\n        this.$store.dispatch(\"CurrentUser/setUserName\", this.userName);\n        this.editUserName ^= 1;\n        window.location.reload();\n      } catch (error) {\n        this.userNameValidation = false;\n        this.userNameMessage = error.response.data.error;\n        console.log(error.response.data.error);\n      }\n    },\n    resetPasswordField() {\n      this.currentPassword = \"\";\n      this.newPassword = null;\n      this.confirmPassword = null;\n    },\n    async updatePassword() {\n      var correctPassword = false;\n      try {\n        correctPassword = (await AuthenticationService.verifyPassword(this.currentPassword)).data.correctPassword;\n      } catch (error) {\n        this.validCurrentPassword = false;\n        this.currentPasswordMessage = error.response.data.error;\n      }\n      if (correctPassword && this.newPasswordValidation && this.confirmPasswordValidation) {\n        try {\n          await AuthenticationService.updatePassword({\n            password: this.newPassword\n          });\n          window.location.reload();\n        } catch (error) {\n          this.validCurrentPassword = false;\n          this.currentPasswordMessage = error.response.data.error;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["AuthenticationService","UserService","name","components","data","user","userId","editName","lastName","userName","firstName","editUserName","formatUserName","formatPassword","userNameMessage","userNameValidation","validCurrentPassword","currentPasswordMessage","newPasswordMessage","confirmPasswordMessage","currentPassword","newPassword","confirmPassword","computed","currentPasswordValidation","newPasswordValidation","test","confirmPasswordValidation","mounted","$store","state","CurrentUser","getUserById","error","console","log","response","methods","changeName","updateName","updateUser","id","dispatch","window","location","reload","changeUserName","username","checkUserName","userNameAvailable","updateUserName","resetPasswordField","updatePassword","correctPassword","verifyPassword","password"],"sources":["src/components/User/Profile/UPublicProfile.vue"],"sourcesContent":["<template>\n  <div>\n    <b-row>\n      <b-col>\n        <h5>Public profile</h5>\n      </b-col>\n    </b-row>\n    <hr class=\"my-2\" />\n    <b-row class=\"mt-3\">\n      <b-col cols=\"7\">\n        <div>\n          <strong>Name</strong>\n          <b-badge\n            pill\n            class=\"ml-2\"\n            v-if=\"user.priority == 1\"\n            variant=\"success\"\n          >\n            <b-icon icon=\"check-circle-fill\" />\n            Admin\n          </b-badge>\n        </div>\n        <div class=\"mt-1\" v-if=\"editName == 0\">\n          {{ user.firstName }} {{ user.lastName }}\n          <b-button @click=\"changeName\" variant=\"white\" class=\"ml-1\" size=\"sm\">\n            <b-icon\n              v-b-tooltip.hover\n              title=\"change name\"\n              scale=\"0.8\"\n              icon=\"pen\"\n            />\n          </b-button>\n        </div>\n\n        <div v-if=\"editName == 1\">\n          <b-form @submit.stop.prevent=\"updateName\">\n            <b-row class=\"mt-2\">\n              <b-col>\n                <b-form-input\n                  size=\"sm\"\n                  placeholder=\"First Name\"\n                  v-model=\"firstName\"\n                  required\n                />\n              </b-col>\n              <b-col>\n                <b-form-input\n                  size=\"sm\"\n                  placeholder=\"Last Name\"\n                  v-model=\"lastName\"\n                  required\n                />\n              </b-col>\n            </b-row>\n            <b-row class=\"mt-2\">\n              <b-col>\n                <b-button size=\"sm\" type=\"submit\" variant=\"warning\">\n                  Save\n                </b-button>\n                <b-button\n                  class=\"ml-2\"\n                  @click=\"editName ^= 1\"\n                  size=\"sm\"\n                  variant=\"outline-danger\"\n                >\n                  Cancel\n                </b-button>\n              </b-col>\n            </b-row>\n          </b-form>\n        </div>\n\n        <div>\n          <div class=\"mt-3\">\n            <strong>Username</strong>\n            <b-button\n              v-if=\"!user.username\"\n              @click=\"changeUserName\"\n              variant=\"white\"\n              class=\"ml-1\"\n              size=\"sm\"\n            >\n              <b-icon\n                v-b-tooltip.hover\n                title=\"Add username\"\n                scale=\"0.8\"\n                icon=\"pen\"\n              />\n            </b-button>\n          </div>\n          <div class=\"mt-1\" v-if=\"user.username && editUserName == 0\">\n            {{ user.username }}\n            <b-button\n              @click=\"changeUserName\"\n              variant=\"white\"\n              class=\"ml-1\"\n              size=\"sm\"\n            >\n              <b-icon\n                v-b-tooltip.hover\n                title=\"Change username\"\n                scale=\"0.8\"\n                icon=\"pen\"\n              />\n            </b-button>\n          </div>\n          <div v-if=\"editUserName == 1\">\n            <b-form @submit.stop.prevent=\"updateUserName\">\n              <b-row max-cols=\"6\" class=\"mt-2\">\n                <b-col cols=\"6\">\n                  <b-form-input\n                    size=\"sm\"\n                    placeholder=\"Username\"\n                    v-model=\"userName\"\n                    debounce=\"500\"\n                    @update=\"checkUserName\"\n                    :state=\"userNameValidation\"\n                    required\n                  />\n                  <b-form-valid-feedback :state=\"userNameValidation\">\n                    This username is available.\n                  </b-form-valid-feedback>\n                  <b-form-invalid-feedback :state=\"userNameValidation\">\n                    {{ userNameMessage }}\n                  </b-form-invalid-feedback>\n                </b-col>\n              </b-row>\n              <b-row class=\"mt-2\">\n                <b-col>\n                  <b-button size=\"sm\" type=\"submit\" variant=\"warning\">\n                    Save\n                  </b-button>\n                  <b-button\n                    class=\"ml-2\"\n                    @click=\"editUserName ^= 1\"\n                    size=\"sm\"\n                    variant=\"outline-danger\"\n                  >\n                    Cancel\n                  </b-button>\n                </b-col>\n              </b-row>\n            </b-form>\n          </div>\n        </div>\n        <div class=\"mt-3\">\n          <strong>Email</strong>\n        </div>\n        <div class=\"mt-1\">\n          {{ user.email }}\n        </div>\n        <div class=\"mt-3\">\n          <strong>Password</strong>\n        </div>\n        <div class=\"mt-1\">\n          ********\n          <b-button\n            v-b-modal.modalUpdatePassword\n            variant=\"white\"\n            class=\"ml-1\"\n            size=\"sm\"\n          >\n            <b-icon\n              v-b-tooltip.hover\n              title=\"change password\"\n              scale=\"0.8\"\n              icon=\"pen\"\n            />\n          </b-button>\n        </div>\n        <b-modal\n          @shown=\"$refs.currentPasswordField.focus()\"\n          title=\"Change password\"\n          id=\"modalUpdatePassword\"\n          hide-footer\n        >\n          <b-form\n            @reset=\"resetPasswordField\"\n            @submit.stop.prevent=\"updatePassword\"\n          >\n            <b-form-group\n              id=\"input-group-current-password\"\n              label=\"Current Password\"\n              label-for=\"input-current-password\"\n            >\n              <b-form-input\n                v-model=\"currentPassword\"\n                id=\"input-current-password\"\n                type=\"password\"\n                ref=\"currentPasswordField\"\n                :state=\"validCurrentPassword && currentPasswordValidation\"\n                required\n              />\n              <b-form-invalid-feedback\n                v-if=\"currentPassword\"\n                :state=\"validCurrentPassword && currentPasswordValidation\"\n              >\n                {{ currentPasswordMessage }}\n              </b-form-invalid-feedback>\n              <b-form-invalid-feedback\n                v-if=\"!currentPassword\"\n                :state=\"validCurrentPassword && currentPasswordValidation\"\n              >\n                Current password field can't be empty!\n              </b-form-invalid-feedback>\n            </b-form-group>\n            <b-form-group\n              id=\"input-group-new-password\"\n              label=\"New Password\"\n              label-for=\"input-new-password\"\n            >\n              <b-form-input\n                v-model=\"newPassword\"\n                id=\"input-new-password\"\n                type=\"password\"\n                :state=\"newPasswordValidation\"\n                required\n              />\n\n              <b-form-invalid-feedback\n                v-if=\"newPassword\"\n                :state=\"newPasswordValidation\"\n              >\n                New password must have 8-32 character long, contain letters,\n                numbers and must not contain space.\n              </b-form-invalid-feedback>\n              <b-form-invalid-feedback\n                v-if=\"!newPassword\"\n                :state=\"newPasswordValidation\"\n              >\n                Password field can't be empty!\n              </b-form-invalid-feedback>\n            </b-form-group>\n            <b-form-group\n              id=\"input-group-confirm-password\"\n              label=\"Confirm Password\"\n              label-for=\"input-confirm-password\"\n            >\n              <b-form-input\n                v-model=\"confirmPassword\"\n                id=\"input-confirm-password\"\n                :state=\"confirmPasswordValidation\"\n                type=\"password\"\n                required\n              />\n              <b-form-invalid-feedback\n                v-if=\"confirmPassword\"\n                :state=\"confirmPasswordValidation\"\n              >\n                Password didn't match\n              </b-form-invalid-feedback>\n              <b-form-invalid-feedback\n                v-if=\"!confirmPassword\"\n                :state=\"confirmPasswordValidation\"\n              >\n                Password field can't be empty!\n              </b-form-invalid-feedback>\n            </b-form-group>\n            <b-row class=\"mt-4\">\n              <b-col cols=\"4\" />\n              <b-col cols=\"4\">\n                <b-button type=\"reset\" block variant=\"danger\"> Reset </b-button>\n              </b-col>\n              <b-col cols=\"4\">\n                <b-button block type=\"submit\" variant=\"success\">\n                  Submit\n                </b-button>\n              </b-col>\n            </b-row>\n          </b-form>\n        </b-modal>\n      </b-col>\n      <b-col cols=\"5\">\n        <b-img\n          rounded=\"circle\"\n          width=\"230px\"\n          height=\"auto\"\n          :src=\"user.profileImage\"\n        />\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\nimport AuthenticationService from \"@/services/AuthenticationService.js\";\nimport UserService from \"@/services/UserService.js\";\nexport default {\n  name: \"UPublicProfile\",\n  components: {},\n  data() {\n    return {\n      user: {},\n      userId: 0,\n      editName: 0,\n      lastName: \"\",\n      userName: \"\",\n      firstName: \"\",\n      editUserName: 0,\n      formatUserName: /^[a-zA-Z0-9]{6,20}$/,\n      formatPassword: /^[a-zA-z0-9]{8,32}$/,\n      userNameMessage: \"\",\n      userNameValidation: null,\n      validCurrentPassword: true,\n      currentPasswordMessage: \"\",\n      newPasswordMessage: \"\",\n      confirmPasswordMessage: \"\",\n      currentPassword: null,\n      newPassword: null,\n      confirmPassword: null,\n    };\n  },\n  computed: {\n    currentPasswordValidation() {\n      if (this.currentPassword == \"\") return false;\n      else return null;\n    },\n    newPasswordValidation() {\n      if (this.newPassword == null) return null;\n      else if (!this.formatPassword.test(this.newPassword)) {\n        return false;\n      } else return true;\n    },\n    confirmPasswordValidation() {\n      if (this.confirmPassword == null) return null;\n      else if (\n        this.newPassword != this.confirmPassword ||\n        !this.formatPassword.test(this.confirmPassword)\n      ) {\n        return false;\n      } else return true;\n    },\n  },\n  async mounted() {\n    this.userId = this.$store.state.CurrentUser.userId;\n    try {\n      this.user = (await UserService.getUserById(this.userId)).data;\n    } catch (error) {\n      console.log(error.response.data.error);\n    }\n  },\n  methods: {\n    changeName() {\n      this.firstName = this.user.firstName;\n      this.lastName = this.user.lastName;\n      this.editName ^= 1;\n    },\n    async updateName() {\n      try {\n        await UserService.updateUser({\n          id: this.user.id,\n          firstName: this.firstName,\n          lastName: this.lastName,\n        });\n        this.$store.dispatch(\"CurrentUser/setName\", {\n          firstName: this.firstName,\n          lastName: this.lastName,\n        });\n        this.editName ^= 1;\n        window.location.reload();\n      } catch (error) {\n        console.log(error.response.data.error);\n      }\n    },\n    changeUserName() {\n      this.userName = this.user.username;\n      this.editUserName ^= 1;\n    },\n    async checkUserName() {\n      if (this.userName == this.user.username) {\n        return true;\n      } else if (!this.formatUserName.test(this.userName)) {\n        this.userNameValidation = false;\n        this.userNameMessage =\n          \"Your username must be 6-20 characters using alphabets and numbers\";\n        return false;\n      }\n      try {\n        const response = (await UserService.checkUserName(this.userName)).data;\n        this.userNameValidation = response.userNameAvailable;\n        if (response.userNameAvailable == true) {\n          this.userNameMessage = \"\";\n          return true;\n        } else {\n          this.userNameMessage = \"This username is not available\";\n          return false;\n        }\n      } catch (error) {\n        this.userNameValidation = false;\n        this.userNameMessage = error.response.data.error;\n        console.log(error.response.data.error);\n      }\n    },\n    async updateUserName() {\n      if (\n        !(await this.checkUserName()) ||\n        this.userName == this.user.username\n      ) {\n        return;\n      }\n      try {\n        await UserService.updateUser({\n          id: this.user.id,\n          username: this.userName,\n        });\n        this.$store.dispatch(\"CurrentUser/setUserName\", this.userName);\n        this.editUserName ^= 1;\n        window.location.reload();\n      } catch (error) {\n        this.userNameValidation = false;\n        this.userNameMessage = error.response.data.error;\n        console.log(error.response.data.error);\n      }\n    },\n    resetPasswordField() {\n      this.currentPassword = \"\";\n      this.newPassword = null;\n      this.confirmPassword = null;\n    },\n    async updatePassword() {\n      var correctPassword = false;\n      try {\n        correctPassword = (\n          await AuthenticationService.verifyPassword(this.currentPassword)\n        ).data.correctPassword;\n      } catch (error) {\n        this.validCurrentPassword = false;\n        this.currentPasswordMessage = error.response.data.error;\n      }\n      if (\n        correctPassword &&\n        this.newPasswordValidation &&\n        this.confirmPasswordValidation\n      ) {\n        try {\n          await AuthenticationService.updatePassword({\n            password: this.newPassword,\n          });\n          window.location.reload();\n        } catch (error) {\n          this.validCurrentPassword = false;\n          this.currentPasswordMessage = error.response.data.error;\n        }\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
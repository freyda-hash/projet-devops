{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AuthenticationService from \"@/services/AuthenticationService.js\";\nimport TopHeader from \"@/components/Common/TopHeader.vue\";\nimport MyFooter from \"@/components/Common/MyFooter.vue\";\nexport default {\n  name: \"Register\",\n  components: {\n    TopHeader,\n    MyFooter\n  },\n  data() {\n    return {\n      firstName: null,\n      lastName: null,\n      email: null,\n      formatName: /^.{1,15}$/,\n      formatEmail: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\n      formatPassword: /^[a-zA-z0-9]{8,32}$/,\n      password: null,\n      validEmail: true,\n      confirmPassword: null,\n      emailMessage: null\n    };\n  },\n  mounted() {\n    this.$refs.firstNameField.focus();\n  },\n  computed: {\n    tokenAlert() {\n      if (this.message == null) return null;else if (this.message.length == 0) return false;else return true;\n    },\n    firstNameValidation() {\n      if (this.firstName == null) return null;else if (!this.formatName.test(this.firstName)) return false;else return true;\n    },\n    lastNameValidation() {\n      if (this.lastName == null) return null;else if (!this.formatName.test(this.lastName)) return false;else return true;\n    },\n    emailValidation() {\n      if (this.email == null) return null;else if (!this.formatEmail.test(this.email)) return false;else return true;\n    },\n    newPasswordValidation() {\n      if (this.password == null) return null;else if (!this.formatPassword.test(this.password)) return false;else return true;\n    },\n    confirmPasswordValidation() {\n      if (this.confirmPassword == null) return null;else if (this.confirmPassword != this.password || !this.formatPassword.test(this.confirmPassword)) return false;else return true;\n    }\n  },\n  methods: {\n    async createAccount() {\n      if (!this.firstNameValidation || !this.lastNameValidation || !this.emailValidation || !this.newPasswordValidation || !this.confirmPasswordValidation) return;\n      try {\n        const user = await AuthenticationService.register({\n          firstName: this.firstName,\n          lastName: this.lastName,\n          email: this.email,\n          password: this.password\n        });\n        const response = (await AuthenticationService.login({\n          email: this.email,\n          password: this.password\n        })).data;\n        this.$store.dispatch(\"CurrentUser/setNewUserId\", user.id);\n        this.$store.dispatch(\"CurrentUser/setNewUserEmail\", this.email);\n        this.$store.dispatch(\"CurrentUser/setToken\", response.token);\n        this.$store.dispatch(\"CurrentUser/setUser\", response.user);\n        this.$router.push({\n          path: \"/profile\"\n        });\n      } catch (error) {\n        this.validEmail = false;\n        this.emailMessage = error.response.data.error;\n      }\n    }\n  }\n};","map":{"version":3,"names":["AuthenticationService","TopHeader","MyFooter","name","components","data","firstName","lastName","email","formatName","formatEmail","formatPassword","password","validEmail","confirmPassword","emailMessage","mounted","$refs","firstNameField","focus","computed","tokenAlert","message","length","firstNameValidation","test","lastNameValidation","emailValidation","newPasswordValidation","confirmPasswordValidation","methods","createAccount","user","register","response","login","$store","dispatch","id","token","$router","push","path","error"],"sources":["src/views/User/Register.vue"],"sourcesContent":["<template>\n  <div>\n    <TopHeader />\n    <b-container class=\"mt-5\">\n      <b-row align-h=\"center\">\n        <b-col cols=\"7\">\n          <b-card style=\"color: #001e5f\">\n            <h4 class=\"font-weight-bold\">Create Account</h4>\n            <b-form @submit.stop.prevent=\"createAccount\" class=\"mt-4\">\n              <b-row>\n                <b-col>\n                  <b-form-group\n                    id=\"input-group-first-name\"\n                    label=\"First Name\"\n                    label-for=\"input-first-name\"\n                  >\n                    <b-form-input\n                      v-model=\"firstName\"\n                      ref=\"firstNameField\"\n                      id=\"input-first-name\"\n                      type=\"text\"\n                      :state=\"firstNameValidation\"\n                      required\n                    />\n                    <b-form-invalid-feedback\n                      v-if=\"firstName\"\n                      :state=\"firstNameValidation\"\n                    >\n                      Your first name could be 15 character long.\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n                </b-col>\n                <b-col>\n                  <b-form-group\n                    id=\"input-group-last-name\"\n                    label=\"Last Name\"\n                    label-for=\"input-last-name\"\n                  >\n                    <b-form-input\n                      v-model=\"lastName\"\n                      id=\"input-last-name\"\n                      type=\"text\"\n                      :state=\"lastNameValidation\"\n                      required\n                    />\n                    <b-form-invalid-feedback\n                      v-if=\"lastName\"\n                      :state=\"lastNameValidation\"\n                    >\n                      Your last name could be 15 character long.\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n                </b-col>\n              </b-row>\n              <b-form-group\n                id=\"input-group-email\"\n                label=\"Email\"\n                label-for=\"input-email\"\n              >\n                <b-form-input\n                  v-model=\"email\"\n                  id=\"input-email\"\n                  type=\"email\"\n                  @keyup=\"validEmail = true\"\n                  :state=\"validEmail && emailValidation\"\n                  required\n                />\n                <b-form-invalid-feedback\n                  v-if=\"email\"\n                  :state=\"validEmail && emailValidation\"\n                >\n                  {{ emailMessage }}\n                </b-form-invalid-feedback>\n              </b-form-group>\n\n              <b-row>\n                <b-col>\n                  <b-form-group\n                    id=\"input-group-password\"\n                    label=\"Password\"\n                    label-for=\"input-password\"\n                  >\n                    <b-form-input\n                      v-model=\"password\"\n                      id=\"input-password\"\n                      type=\"password\"\n                      :state=\"newPasswordValidation\"\n                      required\n                    />\n                    <b-form-invalid-feedback\n                      v-if=\"password\"\n                      :state=\"newPasswordValidation\"\n                    >\n                      Your password could be 8-32 character long, contain\n                      letters, numbers and must not contain space.\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n                </b-col>\n                <b-col>\n                  <b-form-group\n                    id=\"input-group-confirm-password\"\n                    label=\"Confirm Password\"\n                    label-for=\"input-confirm-password\"\n                  >\n                    <b-form-input\n                      v-model=\"confirmPassword\"\n                      id=\"input-confirm-password\"\n                      type=\"password\"\n                      :state=\"confirmPasswordValidation\"\n                      required\n                    />\n                    <b-form-invalid-feedback\n                      v-if=\"confirmPassword\"\n                      :state=\"confirmPasswordValidation\"\n                    >\n                      Password didn't match\n                    </b-form-invalid-feedback>\n                  </b-form-group>\n                </b-col>\n              </b-row>\n\n              <b-row class=\"mt-3\">\n                <b-col cols=\"3\" />\n                <b-col cols=\"6\">\n                  <b-button block type=\"submit\" class=\"p-2\" variant=\"warning\">\n                    Create Account\n                  </b-button>\n                </b-col>\n                <b-col cols=\"3\" />\n              </b-row>\n            </b-form>\n            <hr />\n            <b-row>\n              <b-col class=\"text-center\">\n                <a>Already have an account?</a><a href=\"/login\">&nbsp;Log in</a>\n              </b-col>\n            </b-row>\n          </b-card>\n        </b-col>\n      </b-row>\n    </b-container>\n    <MyFooter class=\"mt-5\" />\n  </div>\n</template>\n\n<script>\nimport AuthenticationService from \"@/services/AuthenticationService.js\";\nimport TopHeader from \"@/components/Common/TopHeader.vue\";\nimport MyFooter from \"@/components/Common/MyFooter.vue\";\nexport default {\n  name: \"Register\",\n  components: {\n    TopHeader,\n    MyFooter,\n  },\n  data() {\n    return {\n      firstName: null,\n      lastName: null,\n      email: null,\n      formatName: /^.{1,15}$/,\n      formatEmail: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\n      formatPassword: /^[a-zA-z0-9]{8,32}$/,\n      password: null,\n      validEmail: true,\n      confirmPassword: null,\n      emailMessage: null,\n    };\n  },\n  mounted() {\n    this.$refs.firstNameField.focus();\n  },\n  computed: {\n    tokenAlert() {\n      if (this.message == null) return null;\n      else if (this.message.length == 0) return false;\n      else return true;\n    },\n    firstNameValidation() {\n      if (this.firstName == null) return null;\n      else if (!this.formatName.test(this.firstName)) return false;\n      else return true;\n    },\n    lastNameValidation() {\n      if (this.lastName == null) return null;\n      else if (!this.formatName.test(this.lastName)) return false;\n      else return true;\n    },\n    emailValidation() {\n      if (this.email == null) return null;\n      else if (!this.formatEmail.test(this.email)) return false;\n      else return true;\n    },\n    newPasswordValidation() {\n      if (this.password == null) return null;\n      else if (!this.formatPassword.test(this.password)) return false;\n      else return true;\n    },\n    confirmPasswordValidation() {\n      if (this.confirmPassword == null) return null;\n      else if (\n        this.confirmPassword != this.password ||\n        !this.formatPassword.test(this.confirmPassword)\n      )\n        return false;\n      else return true;\n    },\n  },\n  methods: {\n    async createAccount() {\n      if (\n        !this.firstNameValidation ||\n        !this.lastNameValidation ||\n        !this.emailValidation ||\n        !this.newPasswordValidation ||\n        !this.confirmPasswordValidation\n      )\n        return;\n\n      try {\n        const user = await AuthenticationService.register({\n          firstName: this.firstName,\n          lastName: this.lastName,\n          email: this.email,\n          password: this.password,\n        });\n     \n      \n\n       \n        const response = (\n          await AuthenticationService.login({\n            email: this.email,\n            password: this.password,\n          })\n        ).data;\n\n        this.$store.dispatch(\"CurrentUser/setNewUserId\", user.id);\n        this.$store.dispatch(\"CurrentUser/setNewUserEmail\", this.email);\n        this.$store.dispatch(\"CurrentUser/setToken\", response.token);\n        this.$store.dispatch(\"CurrentUser/setUser\", response.user);\n        this.$router.push({ path: \"/profile\" });\n\n      } catch (error) {\n    \n        this.validEmail = false;\n        this.emailMessage = error.response.data.error;\n      }      \n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\"></style>\n"],"mappings":";AAkJA,OAAAA,qBAAA;AACA,OAAAC,SAAA;AACA,OAAAC,QAAA;AACA;EACAC,IAAA;EACAC,UAAA;IACAH,SAAA;IACAC;EACA;EACAG,KAAA;IACA;MACAC,SAAA;MACAC,QAAA;MACAC,KAAA;MACAC,UAAA;MACAC,WAAA;MACAC,cAAA;MACAC,QAAA;MACAC,UAAA;MACAC,eAAA;MACAC,YAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,KAAA,CAAAC,cAAA,CAAAC,KAAA;EACA;EACAC,QAAA;IACAC,WAAA;MACA,SAAAC,OAAA,2BACA,SAAAA,OAAA,CAAAC,MAAA,yBACA;IACA;IACAC,oBAAA;MACA,SAAAlB,SAAA,2BACA,UAAAG,UAAA,CAAAgB,IAAA,MAAAnB,SAAA,qBACA;IACA;IACAoB,mBAAA;MACA,SAAAnB,QAAA,2BACA,UAAAE,UAAA,CAAAgB,IAAA,MAAAlB,QAAA,qBACA;IACA;IACAoB,gBAAA;MACA,SAAAnB,KAAA,2BACA,UAAAE,WAAA,CAAAe,IAAA,MAAAjB,KAAA,qBACA;IACA;IACAoB,sBAAA;MACA,SAAAhB,QAAA,2BACA,UAAAD,cAAA,CAAAc,IAAA,MAAAb,QAAA,qBACA;IACA;IACAiB,0BAAA;MACA,SAAAf,eAAA,2BACA,IACA,KAAAA,eAAA,SAAAF,QAAA,IACA,MAAAD,cAAA,CAAAc,IAAA,MAAAX,eAAA,GAEA,kBACA;IACA;EACA;EACAgB,OAAA;IACA,MAAAC,cAAA;MACA,IACA,MAAAP,mBAAA,IACA,MAAAE,kBAAA,IACA,MAAAC,eAAA,IACA,MAAAC,qBAAA,IACA,MAAAC,yBAAA,EAEA;MAEA;QACA,MAAAG,IAAA,SAAAhC,qBAAA,CAAAiC,QAAA;UACA3B,SAAA,OAAAA,SAAA;UACAC,QAAA,OAAAA,QAAA;UACAC,KAAA,OAAAA,KAAA;UACAI,QAAA,OAAAA;QACA;QAKA,MAAAsB,QAAA,IACA,MAAAlC,qBAAA,CAAAmC,KAAA;UACA3B,KAAA,OAAAA,KAAA;UACAI,QAAA,OAAAA;QACA,IACAP,IAAA;QAEA,KAAA+B,MAAA,CAAAC,QAAA,6BAAAL,IAAA,CAAAM,EAAA;QACA,KAAAF,MAAA,CAAAC,QAAA,qCAAA7B,KAAA;QACA,KAAA4B,MAAA,CAAAC,QAAA,yBAAAH,QAAA,CAAAK,KAAA;QACA,KAAAH,MAAA,CAAAC,QAAA,wBAAAH,QAAA,CAAAF,IAAA;QACA,KAAAQ,OAAA,CAAAC,IAAA;UAAAC,IAAA;QAAA;MAEA,SAAAC,KAAA;QAEA,KAAA9B,UAAA;QACA,KAAAE,YAAA,GAAA4B,KAAA,CAAAT,QAAA,CAAA7B,IAAA,CAAAsC,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
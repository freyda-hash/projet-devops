{"ast":null,"code":"export const CurrentUserModule = {\n  namespaced: true,\n  strict: true,\n  state: {\n    token: \"\",\n    user: {},\n    admin: false,\n    userId: 0,\n    newUserEmail: \"\",\n    newUserId: 0,\n    userLoggedIn: false\n  },\n  mutations: {\n    SET_TOKEN(state, token) {\n      state.token = token;\n      if (token != \"\") {\n        state.userLoggedIn = true;\n      } else {\n        state.userLoggedIn = false;\n      }\n    },\n    SET_USER(state, user) {\n      state.user = user;\n      if (Object.keys(user).length != 0) {\n        state.userId = user.id;\n        if (user.priority == 1) {\n          state.admin = true;\n        } else {\n          state.admin = false;\n        }\n      } else {\n        state.admin = false;\n        state.userId = 0;\n      }\n    },\n    SET_NAME(state, {\n      firstName,\n      lastName\n    }) {\n      state.user.firstName = firstName;\n      state.user.lastName = lastName;\n    },\n    SET_USERNAME(state, userName) {\n      state.user.username = userName;\n    },\n    SET_NEW_USER_ID(state, id) {\n      state.newUserId = id;\n    },\n    SET_NEW_USER_EMAIL(state, email) {\n      state.newUserEmail = email;\n    }\n  },\n  actions: {\n    setToken({\n      commit\n    }, token) {\n      commit(\"SET_TOKEN\", token);\n    },\n    setUser({\n      commit\n    }, user) {\n      commit(\"SET_USER\", user);\n    },\n    setName({\n      commit\n    }, {\n      firstName,\n      lastName\n    }) {\n      commit(\"SET_NAME\", {\n        firstName,\n        lastName\n      });\n    },\n    setUserName({\n      commit\n    }, userName) {\n      commit(\"SET_USERNAME\", userName);\n    },\n    setNewUserId({\n      commit\n    }, id) {\n      commit(\"SET_NEW_USER_ID\", id);\n    },\n    setNewUserEmail({\n      commit\n    }, email) {\n      commit(\"SET_NEW_USER_EMAIL\", email);\n    }\n  }\n};","map":{"version":3,"names":["CurrentUserModule","namespaced","strict","state","token","user","admin","userId","newUserEmail","newUserId","userLoggedIn","mutations","SET_TOKEN","SET_USER","Object","keys","length","id","priority","SET_NAME","firstName","lastName","SET_USERNAME","userName","username","SET_NEW_USER_ID","SET_NEW_USER_EMAIL","email","actions","setToken","commit","setUser","setName","setUserName","setNewUserId","setNewUserEmail"],"sources":["/home/perrine/Downloads/phone-shop/phone-shop/client/src/store/CurrentUser.js"],"sourcesContent":["export const CurrentUserModule = {\n  namespaced: true,\n  strict: true,\n  state: {\n    token: \"\",\n    user: {},\n    admin: false,\n    userId: 0,\n    newUserEmail: \"\",\n    newUserId: 0,\n    userLoggedIn: false,\n  },\n  mutations: {\n    SET_TOKEN(state, token) {\n      state.token = token;\n      if (token != \"\") {\n        state.userLoggedIn = true;\n      } else {\n        state.userLoggedIn = false;\n      }\n    },\n\n    SET_USER(state, user) {\n      state.user = user;\n      if (Object.keys(user).length != 0) {\n        state.userId = user.id;\n        if (user.priority == 1) {\n          state.admin = true;\n        } else {\n          state.admin = false;\n        }\n      } else {\n        state.admin = false;\n        state.userId = 0;\n      }\n    },\n    SET_NAME(state, { firstName, lastName }) {\n      state.user.firstName = firstName;\n      state.user.lastName = lastName;\n    },\n    SET_USERNAME(state, userName) {\n      state.user.username = userName;\n    },\n    SET_NEW_USER_ID(state, id) {\n      state.newUserId = id;\n    },\n    SET_NEW_USER_EMAIL(state, email) {\n      state.newUserEmail = email;\n    },\n  },\n  actions: {\n    setToken({ commit }, token) {\n      commit(\"SET_TOKEN\", token);\n    },\n    setUser({ commit }, user) {\n      commit(\"SET_USER\", user);\n    },\n    setName({ commit }, { firstName, lastName }) {\n      commit(\"SET_NAME\", { firstName, lastName });\n    },\n    setUserName({ commit }, userName) {\n      commit(\"SET_USERNAME\", userName);\n    },\n    setNewUserId({ commit }, id) {\n      commit(\"SET_NEW_USER_ID\", id);\n    },\n    setNewUserEmail({ commit }, email) {\n      commit(\"SET_NEW_USER_EMAIL\", email);\n    },\n  },\n};\n"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAG;EAC/BC,UAAU,EAAE,IAAI;EAChBC,MAAM,EAAE,IAAI;EACZC,KAAK,EAAE;IACLC,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE,CAAC,CAAC;IACRC,KAAK,EAAE,KAAK;IACZC,MAAM,EAAE,CAAC;IACTC,YAAY,EAAE,EAAE;IAChBC,SAAS,EAAE,CAAC;IACZC,YAAY,EAAE;EAChB,CAAC;EACDC,SAAS,EAAE;IACTC,SAASA,CAACT,KAAK,EAAEC,KAAK,EAAE;MACtBD,KAAK,CAACC,KAAK,GAAGA,KAAK;MACnB,IAAIA,KAAK,IAAI,EAAE,EAAE;QACfD,KAAK,CAACO,YAAY,GAAG,IAAI;MAC3B,CAAC,MAAM;QACLP,KAAK,CAACO,YAAY,GAAG,KAAK;MAC5B;IACF,CAAC;IAEDG,QAAQA,CAACV,KAAK,EAAEE,IAAI,EAAE;MACpBF,KAAK,CAACE,IAAI,GAAGA,IAAI;MACjB,IAAIS,MAAM,CAACC,IAAI,CAACV,IAAI,CAAC,CAACW,MAAM,IAAI,CAAC,EAAE;QACjCb,KAAK,CAACI,MAAM,GAAGF,IAAI,CAACY,EAAE;QACtB,IAAIZ,IAAI,CAACa,QAAQ,IAAI,CAAC,EAAE;UACtBf,KAAK,CAACG,KAAK,GAAG,IAAI;QACpB,CAAC,MAAM;UACLH,KAAK,CAACG,KAAK,GAAG,KAAK;QACrB;MACF,CAAC,MAAM;QACLH,KAAK,CAACG,KAAK,GAAG,KAAK;QACnBH,KAAK,CAACI,MAAM,GAAG,CAAC;MAClB;IACF,CAAC;IACDY,QAAQA,CAAChB,KAAK,EAAE;MAAEiB,SAAS;MAAEC;IAAS,CAAC,EAAE;MACvClB,KAAK,CAACE,IAAI,CAACe,SAAS,GAAGA,SAAS;MAChCjB,KAAK,CAACE,IAAI,CAACgB,QAAQ,GAAGA,QAAQ;IAChC,CAAC;IACDC,YAAYA,CAACnB,KAAK,EAAEoB,QAAQ,EAAE;MAC5BpB,KAAK,CAACE,IAAI,CAACmB,QAAQ,GAAGD,QAAQ;IAChC,CAAC;IACDE,eAAeA,CAACtB,KAAK,EAAEc,EAAE,EAAE;MACzBd,KAAK,CAACM,SAAS,GAAGQ,EAAE;IACtB,CAAC;IACDS,kBAAkBA,CAACvB,KAAK,EAAEwB,KAAK,EAAE;MAC/BxB,KAAK,CAACK,YAAY,GAAGmB,KAAK;IAC5B;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQA,CAAC;MAAEC;IAAO,CAAC,EAAE1B,KAAK,EAAE;MAC1B0B,MAAM,CAAC,WAAW,EAAE1B,KAAK,CAAC;IAC5B,CAAC;IACD2B,OAAOA,CAAC;MAAED;IAAO,CAAC,EAAEzB,IAAI,EAAE;MACxByB,MAAM,CAAC,UAAU,EAAEzB,IAAI,CAAC;IAC1B,CAAC;IACD2B,OAAOA,CAAC;MAAEF;IAAO,CAAC,EAAE;MAAEV,SAAS;MAAEC;IAAS,CAAC,EAAE;MAC3CS,MAAM,CAAC,UAAU,EAAE;QAAEV,SAAS;QAAEC;MAAS,CAAC,CAAC;IAC7C,CAAC;IACDY,WAAWA,CAAC;MAAEH;IAAO,CAAC,EAAEP,QAAQ,EAAE;MAChCO,MAAM,CAAC,cAAc,EAAEP,QAAQ,CAAC;IAClC,CAAC;IACDW,YAAYA,CAAC;MAAEJ;IAAO,CAAC,EAAEb,EAAE,EAAE;MAC3Ba,MAAM,CAAC,iBAAiB,EAAEb,EAAE,CAAC;IAC/B,CAAC;IACDkB,eAAeA,CAAC;MAAEL;IAAO,CAAC,EAAEH,KAAK,EAAE;MACjCG,MAAM,CAAC,oBAAoB,EAAEH,KAAK,CAAC;IACrC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}